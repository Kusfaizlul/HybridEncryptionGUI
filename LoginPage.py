# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'LoginPage.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import socket
import sys
import getpass
import random
import math
from math import gcd
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMessageBox

alpha = "4W[rYZK’.vyenqmAVh8f3Mx+7lB2^uzdkG~(:d>Q“_60acEPR/p\9L]j1|D{<C)*I&@=Xb;J?Ft-Nwo%gU!T#5ic`S}$sOH"
brute_counter = n = phi  = e = d = 0

def PrimeGenerator():       #Generate Prime Number
    x = True
    while(x):
        ran = random.randint(100,1000)
        flag = True
        if ran > 1:
            for i in range(2,ran):
                if (ran % i == 0):
                    flag = False
        if flag:
            x = False
            return ran

def egcd(a, b):             #Greatest common divisor
    if a == 0:
        return b, 0, 1
    else:
        g, y, x = egcd(b % a, a)
        return g, x - (b // a) * y, y

def modinv(a, m):           #Multiplicative Inverse
    g, x, y = egcd(a, m)
    if g != 1:
        raise Exception('modular inverse does not exist')
    else:
        return x % m

def coprimes(a):            #Searching E
    l = []
    for x in range(2, a):
        if gcd(a, x) == 1 and modinv(x,phi) != None:
            l.append(x)
    for x in l:
        if x == modinv(x,phi):
            l.remove(x)
    return l

def encrypt_block(m):
    c = modinv(m**e, n)
    if c == None:
        print('No modular multiplicative inverse for block ' + str(m) + '.')
    return c

def encrypt_string(s):
    val = encrypt_block(ord(s))
    part = ""
    for p in str(val):
        part += alpha[int(p)]

    part += ","
    return part

def encrypt(msg):
    enc = ""
    for c in msg:
        enc += encrypt_string(c)
    return enc

def process(username,password):
    
    global phi,a,e,d,n
    p = PrimeGenerator()
    q = PrimeGenerator()

    ch = True
    while ch:               # Check If value P equal to Q. Both value can not be same
        if q == p :
            q = PrimeGenerator()
        else:
            ch = False

    n = p * q

    phi = (p-1) * (q-1)
    

    a = coprimes(phi)
    e = random.choice(a)
    
    d = modinv(e,phi)
    # Encypting Process

    user = encrypt(username)
    sec = encrypt(password)


    login = str(user) +"#"+ str(sec)  +"<" + str(n) + ">" + str(d)

    shift = 5
    new_ind = 0
    shiflog = ""
    # Shifting
    for i in login:
        if i in alpha:
            new_ind = alpha.index(i) + shift 
            calc = new_ind % 94 
            shiflog += alpha[calc] 
        else:
            shiflog += i 

    # send to server
    Client.send(shiflog.encode())

    result =int( Client.recv(1024).decode())

    return result

class Ui_MaiMenu(object):

    def Clicked(self):
        global brute_counter

        bf = sq = 1

        Username = self.lineEdit_Username.text()
        Password = self.lineEdit_Password.text()
        
        #Brute Force Checker
        if brute_counter == 3:
            bf = 9999
            Client.send(str(bf).encode())
            QMessageBox.about (Form, "Alert", "No Brute Forcing Please. Terminating the program.")
            self.close()
        else:
            Client.send(str(bf).encode())
        
        Client.recv(1024)

        if Username == "" and Password == "":
            QMessageBox.about (Form, "Alert", "Username and Password cannot be blank. Please try again.") 

        elif Username[0] == "`" or Username[0] == "-" or Username[0] == "_" or Username[0] == '"' or Username[0] == '~' or Username[0] == '&' :
            sq = 9999
            Client.send(str(sq).encode())
            QMessageBox.about (Form, "Alert", "No Injection Please. Terminating the program.")
            self.close()
        
        if sq == 1:
            Client.send(str(sq).encode())
        
        Client.recv(1024)

        #Encryption
        result = int(process(Username,Password))
        
        if result % 2 == 0 :
            QMessageBox.about (Form, "Successful logged in", "Successful log in. Welcome " + Username)
            self.close()
        else:
            QMessageBox.about (Form, "Invalid Credential", "Invalid Credential Please Try Again. ")

        brute_counter += 1


    def setupUi(self, MaiMenu):
        MaiMenu.setObjectName("MaiMenu")
        MaiMenu.resize(351, 411)
        self.Widget = QtWidgets.QWidget(MaiMenu)
        self.Widget.setGeometry(QtCore.QRect(0, 0, 351, 411))
        self.Widget.setObjectName("Widget")
        self.Background = QtWidgets.QLabel(self.Widget)
        self.Background.setGeometry(QtCore.QRect(20, 20, 311, 371))
        self.Background.setStyleSheet("background-color: rgba(16, 30, 41, 240);\n"
"border-radius:10px;")
        self.Background.setText("")
        self.Background.setObjectName("Background")
        self.lineEdit_Username = QtWidgets.QLineEdit(self.Widget)
        self.lineEdit_Username.setGeometry(QtCore.QRect(50, 140, 250, 30))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.lineEdit_Username.setFont(font)
        self.lineEdit_Username.setStyleSheet("background-color:rgba(0,0,0,0);\n"
"border:1px solid rgba(0,0,0,0);\n"
"border-bottom-color: gray;\n"
"color: rgb(255,255,255);\n"
"padding-bottom: 7px;")
        self.lineEdit_Username.setObjectName("lineEdit_Username")
        self.lineEdit_Password = QtWidgets.QLineEdit(self.Widget)
        self.lineEdit_Password.setGeometry(QtCore.QRect(50, 220, 250, 30))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.lineEdit_Password.setFont(font)
        self.lineEdit_Password.setStyleSheet("background-color:rgba(0,0,0,0);\n"
"border:1px solid rgba(0,0,0,0);\n"
"border-bottom-color: gray;\n"
"color: rgb(255,255,255);\n"
"padding-bottom: 7px;")
        self.lineEdit_Password.setEchoMode(QtWidgets.QLineEdit.Password)
        self.lineEdit_Password.setObjectName("lineEdit_Password")
        self.LoginButton = QtWidgets.QPushButton(self.Widget)
        self.LoginButton.setGeometry(QtCore.QRect(60, 310, 241, 41))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setItalic(False)
        font.setUnderline(False)
        font.setWeight(50)
        self.LoginButton.setFont(font)
        self.LoginButton.setStyleSheet("QpushButton#pushButton{\n"
"background-color : gray;\n"
"}\n"
"\n"
"QpushButton#pushButton:pressed{\n"
"padding-left:5px;\n"
"padding-top:5px;\n"
"background-color:rgb(95, 95, 95);\n"
"bakcground-position:calc(100%-10px)center;\n"
"}\n"
"")
        self.LoginButton.setObjectName("LoginButton")
        self.LoginButton.clicked.connect(self.Clicked)

        self.retranslateUi(MaiMenu)
        QtCore.QMetaObject.connectSlotsByName(MaiMenu)

    def retranslateUi(self, MaiMenu):
        _translate = QtCore.QCoreApplication.translate
        MaiMenu.setWindowTitle(_translate("MaiMenu", "Hybrid Encription"))
        self.lineEdit_Username.setPlaceholderText(_translate("MaiMenu", "Username"))
        self.lineEdit_Password.setPlaceholderText(_translate("MaiMenu", "Password"))
        self.LoginButton.setText(_translate("MaiMenu", "L O G I N"))

if __name__ == "__main__":
    
    Client = socket.socket()
    host = "127.0.0.1"
    port = 4848
    
    try:
        Client.connect((host,port))
        print("Successful Connected !")
    except socket.error as e:
        print (str(e))
        exit()

    app = QtWidgets.QApplication(sys.argv)
    Form = QtWidgets.QWidget()
    UI = Ui_MaiMenu()
    UI.setupUi(Form)
    Form.show()
    sys.exit(app.exec())
